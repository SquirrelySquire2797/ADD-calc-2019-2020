

#findwhereRisextractingfrom
getwd()

#install ADD package 
install.packages('lmerTest')
library(lmerTest)
install.packages('emmeans')
library(emmeans)
if(!require(mosaic)){install.packages("mosaic")}
library(mosaic)
if(!require(tidyverse)){install.packages("tidyverse")}
library(tidyverse)
if(!require(broom)){install.packages("broom")}
library(broom)
install.packages('devtools')
library(devtools)
if(!require(drc)){install.packages("drc")}
library(drc)
if(!require(nlme)){install.packages("nlme")}
library(nlme)
if(!require(rcompanion)){install.packages("rcompanion")}
if(!require(FSA)){install.packages("FSA")}
if(!require(rcompanion)){install.packages("rcompanion")}
if(!require(FSA)){install.packages("FSA")}
if(!require(psych)){install.packages("psych")}
library(rcompanion)
library(FSA)
library(psych)

#if error in read, double check WD
setwd("C:/Users/16512/Desktop/ADD Calc")
getwd()

#readtempdatacsv,T meanslinesgrabbingaretrue
x=read.csv('2019Tempdata/2019 TEMP DATA.csv', header = T)
#returntopmostportionofdata
head(x)
#database is searched by R when evaluating a variable, so objects in database can be accessed by simply giving their names 
attach(x)
#AddsecondADDpackagewithbasetemps
if(!require(pollen)){install.packages("pollen")}
library(pollen)

#MINTEMPOF-7.7FORYEAR
GDDMINEIGHT=gdd(tmax=MAX, tmin=MIN, tbase=-8,tbase_max=100)
GDDMINSEVEN=gdd(tmax=MAX, tmin=MIN, tbase=-7,tbase_max=100)
GDDMINSIX=gdd(tmax=MAX, tmin=MIN, tbase=-6,tbase_max=100)
GDDMINFIVE=gdd(tmax=MAX, tmin=MIN, tbase=-5,tbase_max=100)
GDDMINFOUR=gdd(tmax=MAX, tmin=MIN, tbase=-4,tbase_max=100)
GDDMINTHREE=gdd(tmax=MAX, tmin=MIN, tbase=-3,tbase_max=100)
GDDMINTWO=gdd(tmax=MAX, tmin=MIN, tbase=-2,tbase_max=100)
GDDMINONE=gdd(tmax=MAX, tmin=MIN, tbase=-1,tbase_max=100)
GDDZERO=gdd(tmax=MAX, tmin=MIN, tbase=0,tbase_max=100)
GDDONE=gdd(tmax=MAX, tmin=MIN, tbase=1,tbase_max=100)
GDDTWO=gdd(tmax=MAX, tmin=MIN, tbase=2,tbase_max=100)
GDDTHREE=gdd(tmax=MAX, tmin=MIN, tbase=3,tbase_max=100)
GDDFOUR=gdd(tmax=MAX, tmin=MIN, tbase=4,tbase_max=100)
GDDFIVE=gdd(tmax=MAX, tmin=MIN, tbase=5,tbase_max=100)
GDDSIX=gdd(tmax=MAX, tmin=MIN, tbase=6,tbase_max=100)
GDDSEVEN=gdd(tmax=MAX, tmin=MIN, tbase=7,tbase_max=100)


#findbaseof 0 value 


GDDZERO

#fromlow100tohigh100, create a inc by 5 sequence

ADDincfive <- seq(from = 6311, to = 6511, by = 5)

###functionstart###

#setupfilelocation

folder <- "2019Tempdata/"

#createfunction

ADDlogtest <- function(var, name){
  
  #definevariableforfunction
  TS1 <- var

  
  ##41 different values of ADD from base 6411
  
  for(i in 1:41){
    thresholdresult <- TS1 > ADDincfive[i]
    
    #changetocharactertofind"true"
    
    threshchar <- as.character(thresholdresult)
    
    #change sequencenametoTSEQfor 
    
    TSEQ <- ADDincfive[i]
    if (TRUE %in% threshchar){
      TSEQ <- as.character(TSEQ)
      fileA<-paste(folder, name, TSEQ, ".csv", sep="")
      write.csv(thresholdresult, fileA)
    }
  }
}
#startfunctioncalc 



{ADDlogtest(GDDMINEIGHT,"Anegeight")
  ADDlogtest(GDDMINSEVEN,"Bnegseven")
  ADDlogtest(GDDMINSIX,"Cnegsix")
  ADDlogtest(GDDMINFIVE,"Dnegfive")
  ADDlogtest(GDDMINFOUR,"Enegfour")
  ADDlogtest(GDDMINTHREE,"Fnegthree")
  ADDlogtest(GDDMINTWO,"Gnegtwo")
  ADDlogtest(GDDMINONE,"Hnegoone")
  ADDlogtest(GDDZERO,"Izero")
  ADDlogtest(GDDONE,"Jone")
  ADDlogtest(GDDTWO,"Ktwo")
  ADDlogtest(GDDTHREE,"Lthree")
  ADDlogtest(GDDFOUR,"Mfour")}

##startlinearregression 
gddzero1 <-Matrix(GDDZERO, nrow = 365, ncol= 1)

##make vector for specific calender days 
ADDlin <- c(121, 151, 182, 213, 243, 274, 304, 335, 365)

###makeemptyvector
Calcum2019result <- c()

##return ADD values of calender 
for(i in 1:9){
  a <- ADDlin[i]
  Calcum2019result <- print(gddzero1[a,])
}

##read the cumulative ADD values for each month in the document 
y=read.csv('2019Tempdata/DD 2019-2020.csv', header=TRUE) 

##check everything is there
View(y)

##download regression packages 

if(!require(rcompanion)){install.packages("rcompanion")}
library(rcompanion)
if(!require(car)){install.packages("car")}
library(car)

attach(y)


 ##begin test
  
{LOGADD=glm(CODE~ADD, family=binomial)
nagelkerke(LOGADD)}

##look at nagelkerke and p value 

##create matrix for new threshold 



gddzero3 <-Matrix(GDDMINTHREE , nrow = 365, ncol= 1)


##make vector for specific calender days 
ADDlin3<- c(121, 151, 182, 213, 243, 274, 304, 335, 365)

###makeemptyvector
Calcum2019resultNEW<- c()

##return ADD values of calender 
for(i in 1:9){
  L3 <- ADDlin3[i]
  Calcum2019resultNEW <- print( gddzero3 [L3,])}



##createfigures
z1=read.csv('2019Tempdata/DD Reg 2019.csv', header=TRUE)


head(z1)
attach(z1)

LOGADD$coef
ADDb0=LOGADD$coef[1]
ADDx1=LOGADD$coef[2]
ADDrange=seq(from=0, to=9000, by=250)
ADDrange
a_logit=ADDb0+ADDx1*ADDrange
a_logit
a_prob=exp(a_logit)/(1+exp(a_logit))
a_prob
plot(ADD, PROP, xlab="Accumulated Degree Days", ylab="Peak Biomass Proportion", xlim=c(0,9000), ylim = c(0,1))


lines(ADDrange,a_prob)

#homlin. good fit 


attach(y)
if(!require(modEvA)){install.packages("modEvA")}
library(modEvA)
HLfit(LOGADD, bin.method="prob.bins")

##spearman and tau tests

cor.test(CODE, ADD, method="spearman")
cor.test(CODE, ADD, method="kendall")
